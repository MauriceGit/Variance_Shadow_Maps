#version 430

// Process particles in blocks of 240. Because my graphics card has 240 shader units.
layout (local_size_x = 240, local_size_y = 1, local_size_z = 1) in;


layout (binding=0, rg32f) readonly  uniform image2D imageIn;
layout (binding=1, rg32f) writeonly uniform image2D imageOut;

uniform int width, height;
uniform bool blurVertical;
uniform int kernelSize;

void verticalBlur(uint index) {
    int blurSizeHalf = kernelSize/2;

    // Weighting the first pixel high, so we have the correct pixel count later!
    vec2 currentWeight = imageLoad(imageIn,  ivec2(index, 0)).rg * float(blurSizeHalf);

    // Getting the right side of the kernel.
    for (int i = 0; i <= blurSizeHalf; i++) {
        currentWeight += imageLoad(imageIn,  ivec2(index, i)).rg;
    }

    for (int i = 0; i < height; i++) {
        imageStore(imageOut, ivec2(index, i), vec4(currentWeight / float(kernelSize),0,0));
        int left  = max(0, i-blurSizeHalf);
        int right = min(width-1, i+blurSizeHalf);
        currentWeight += imageLoad(imageIn,  ivec2(index, right)).rg;
        currentWeight -= imageLoad(imageIn,  ivec2(index, left)).rg;
    }
}

void horizontalBlur(uint index) {
    int blurSizeHalf = kernelSize/2;

    // Weighting the first pixel high, so we have the correct pixel count later!
    vec2 currentWeight = imageLoad(imageIn,  ivec2(0, index)).rg * float(blurSizeHalf);

    // Getting the right side of the kernel.
    for (int i = 0; i <= blurSizeHalf; i++) {
        currentWeight += imageLoad(imageIn,  ivec2(i, index)).rg;
    }

    for (int i = 0; i < height; i++) {
        imageStore(imageOut, ivec2(i, index), vec4(currentWeight / float(kernelSize),0,0));
        int left  = max(0, i-blurSizeHalf);
        int right = min(width-1, i+blurSizeHalf);
        currentWeight += imageLoad(imageIn,  ivec2(right, index)).rg;
        currentWeight -= imageLoad(imageIn,  ivec2(left,  index)).rg;
    }
}

void main(void)
{
    uint pos = gl_GlobalInvocationID.x;

    if (blurVertical) {
        verticalBlur(pos);
    } else {
        horizontalBlur(pos);
    }
}



